'use client';

import { motion, AnimatePresence, useScroll, useTransform } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { AlertTriangle, Code2, Sparkles, Zap, ChevronDown, Clock, Laptop, Rocket, XCircle, CheckCircle, Users, Brain } from 'lucide-react';
import { AnimatedCodeScreen } from '@/components/ui/AnimatedCodeScreen';

// Story phases
type StoryPhase = 'problem' | 'attempts' | 'frustration' | 'realization' | 'solution' | 'expertise' | 'results';

const STORY_TEXTS = {
  problem: "You tried ChatGPT, Claude Code, CoPilot, Bolt, Lovable.",
  attempts: "Day 3: Still debugging AI-generated code...",
  frustration: "The AI promised a full app. You got broken fragments.",
  realization: "AI tools are powerful. BUT, In our hands.",
  solution: "We speak AI fluently.",
  expertise: "Experience AI's speed.",
  results: "From concept to deployment in days, not months."
};

// Failed AI attempts that users might have tried
const FAILED_ATTEMPTS = [
  "// ChatGPT said this would work...\nError: Cannot read property 'undefined' of undefined",
  "// Claude generated this auth system\n// TODO: Fix security vulnerabilities",
  "// Copilot suggested this database schema\n// Warning: This will delete all your data",
  "// AI-generated payment integration\n// Status: Not PCI compliant",
  "// Generated by AI in 5 minutes\n// Debugged by you for 5 days"
];

export default function HeroSectionV2() {
  const [currentPhase, setCurrentPhase] = useState<StoryPhase>('problem');
  const [showCodeScreen, setShowCodeScreen] = useState(false);
  const [typedText, setTypedText] = useState('');
  const [problemTypedText, setProblemTypedText] = useState('');
  const [showScrollIndicator, setShowScrollIndicator] = useState(false);
  const [selectedAttempt] = useState(() => FAILED_ATTEMPTS[Math.floor(Math.random() * FAILED_ATTEMPTS.length)]);

  // Scroll-based animation refs and values
  const containerRef = useRef<HTMLDivElement>(null);
  const { scrollY } = useScroll();

  // Calculate the upward movement of the code screen
  // It should move up based on scroll, but only after the final phase
  const codeScreenY = useTransform(
    scrollY,
    [0, 600], // Scroll range - increased for smoother transition
    [0, -700] // Movement range (negative for upward) - moves up to cover the content above
  );

  // Optional: Add opacity fade for the text/CTA when code screen covers them
  const contentOpacity = useTransform(
    scrollY,
    [300, 500],
    [1, 0]
  );

  // Control navbar appearance based on code screen position
  const [showNavbar, setShowNavbar] = useState(false);

  useEffect(() => {
    const unsubscribe = scrollY.on("change", (latest) => {
      // Show navbar when code screen reaches near the top (around 500px scroll)
      setShowNavbar(latest > 500);
    });

    return () => unsubscribe();
  }, [scrollY]);

  // Story progression
  useEffect(() => {
    const timeline = [
      { phase: 'problem' as StoryPhase, duration: 7000 }, // Extended further for slower typewriter
      { phase: 'attempts' as StoryPhase, duration: 3500 },
      { phase: 'frustration' as StoryPhase, duration: 5000 }, // Extended to give more impact
      { phase: 'realization' as StoryPhase, duration: 8500 }, // Maximum time for the key insight
      { phase: 'solution' as StoryPhase, duration: 4000 }, // Extended to let message sink in
      { phase: 'expertise' as StoryPhase, duration: 2500 },
      { phase: 'results' as StoryPhase, duration: Infinity }
    ];

    let currentIndex = 0;
    let timeoutId: NodeJS.Timeout;

    const progressStory = () => {
      if (currentIndex < timeline.length) {
        const { phase, duration } = timeline[currentIndex];
        setCurrentPhase(phase);

        if (phase === 'expertise') {
          setShowCodeScreen(true);
        }

        if (phase === 'results') {
          setShowScrollIndicator(true);
        }

        if (duration !== Infinity) {
          timeoutId = setTimeout(() => {
            currentIndex++;
            progressStory();
          }, duration);
        }
      }
    };

    progressStory();

    return () => clearTimeout(timeoutId);
  }, []);

  // Set problem text immediately (no typewriter)
  useEffect(() => {
    if (currentPhase === 'problem') {
      setProblemTypedText(STORY_TEXTS.problem);
    }
  }, [currentPhase]);

  // Typing animation for failed attempts
  useEffect(() => {
    if (currentPhase === 'attempts') {
      setTypedText(''); // Reset
      let index = 0;
      const interval = setInterval(() => {
        if (index <= selectedAttempt.length) {
          setTypedText(selectedAttempt.slice(0, index));
          index++;
        } else {
          clearInterval(interval);
        }
      }, 30);
      return () => clearInterval(interval);
    }
  }, [currentPhase, selectedAttempt]);

  return (
    <section className="relative min-h-screen flex items-center justify-center overflow-visible bg-gradient-to-br from-gray-950 via-gray-900 to-black">
      {/* Background Elements */}
      <div className="absolute inset-0 z-0">
        {/* Grid pattern */}
        <div className="absolute inset-0 bg-[url('/grid.svg')] bg-center opacity-20" />

        {/* Gradient orbs */}
        <motion.div
          animate={{
            x: [0, 100, 0],
            y: [0, -100, 0],
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: 'linear'
          }}
          className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-600/20 rounded-full blur-3xl"
        />
        <motion.div
          animate={{
            x: [0, -100, 0],
            y: [0, 100, 0],
          }}
          transition={{
            duration: 15,
            repeat: Infinity,
            ease: 'linear'
          }}
          className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-blue-600/20 rounded-full blur-3xl"
        />
      </div>

      {/* Main Content */}
      <div className="relative z-10 w-full max-w-7xl mx-auto px-4">
        <AnimatePresence mode="wait">
          {/* Problem Phase - You tried AI */}
          {currentPhase === 'problem' && (
            <motion.div
              key="problem"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="text-center max-w-5xl mx-auto"
            >
              <motion.div
                className="flex justify-center gap-8 mb-12"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
              >
                <motion.div
                  animate={{
                    y: [0, -8, 0],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{ duration: 2.5, repeat: Infinity, delay: 0 }}
                  className="relative group"
                >
                  <Code2 className="w-16 h-16 text-gray-500 mb-8" />
                  <motion.span
                    className="absolute -bottom-2 left-1/2 -translate-x-1/2 text-xs text-gray-600 whitespace-nowrap"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 1 }}
                  >
                    ChatGPT
                  </motion.span>
                </motion.div>
                <motion.div
                  animate={{
                    y: [0, -8, 0],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{ duration: 2.5, repeat: Infinity, delay: 0.3 }}
                  className="relative group"
                >
                  <Brain className="w-16 h-16 text-gray-500 mb-8" />
                  <motion.span
                    className="absolute -bottom-2 left-1/2 -translate-x-1/2 text-xs text-gray-600"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 1.2 }}
                  >
                    Claude
                  </motion.span>
                </motion.div>
                <motion.div
                  animate={{
                    y: [0, -8, 0],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{ duration: 2.5, repeat: Infinity, delay: 0.6 }}
                  className="relative group"
                >
                  <Sparkles className="w-16 h-16 text-gray-500 mb-8" />
                  <motion.span
                    className="absolute -bottom-2 left-1/2 -translate-x-1/2 text-xs text-gray-600"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 1.4 }}
                  >
                    Copilot
                  </motion.span>
                </motion.div>
              </motion.div>

              <motion.h1
                className="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-8"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.5 }}
              >
                {problemTypedText}
              </motion.h1>

              <motion.p
                className="text-xl md:text-2xl text-gray-400"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5, delay: 1.2 }}
              >
                Every AI tool out there.
              </motion.p>

              <motion.p
                className="text-lg text-gray-500 mt-4"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5, delay: 1.8 }}
              >
                But something kept going wrong...
              </motion.p>
            </motion.div>
          )}

          {/* Attempts Phase - Show failed code */}
          {currentPhase === 'attempts' && (
            <motion.div
              key="attempts"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="max-w-4xl mx-auto"
            >
              <div className="mb-8 text-center">
                <Clock className="w-16 h-16 mx-auto mb-4 text-red-400" />
                <h2 className="text-2xl md:text-4xl font-bold text-white mb-2">
                  {STORY_TEXTS.attempts}
                </h2>
              </div>

              {/* Mock Terminal showing failed AI code */}
              <motion.div
                initial={{ scale: 0.95, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.5 }}
                className="bg-gray-900/80 backdrop-blur-sm rounded-lg border border-red-900/50 p-6 shadow-2xl"
                style={{
                  boxShadow: '0 0 100px rgba(239, 68, 68, 0.1)',
                }}
              >
                <div className="flex items-center gap-2 mb-4">
                  <div className="w-3 h-3 bg-red-500 rounded-full" />
                  <div className="w-3 h-3 bg-yellow-500 rounded-full" />
                  <div className="w-3 h-3 bg-green-500 rounded-full" />
                  <span className="ml-auto text-xs text-gray-500 font-mono">your-project.js</span>
                </div>
                <div className="font-mono text-sm">
                  <pre className="text-gray-300 whitespace-pre-wrap">{typedText}</pre>
                  {typedText.length < selectedAttempt.length && (
                    <motion.span
                      animate={{ opacity: [1, 0, 1] }}
                      transition={{ duration: 0.8, repeat: Infinity }}
                      className="inline-block w-2 h-4 ml-1 bg-red-400"
                    />
                  )}
                </div>
                {typedText.length === selectedAttempt.length && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.5 }}
                    className="mt-4 flex items-center gap-2 text-xs text-red-400"
                  >
                    <XCircle className="w-4 h-4" />
                    Build failed. Again.
                  </motion.div>
                )}
              </motion.div>
            </motion.div>
          )}

          {/* Frustration Phase */}
          {currentPhase === 'frustration' && (
            <motion.div
              key="frustration"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="text-center"
            >
              <AlertTriangle className="w-20 h-20 mx-auto mb-6 text-yellow-400" />
              <h2 className="text-3xl md:text-5xl font-bold text-white mb-4">
                {STORY_TEXTS.frustration}
              </h2>
              <p className="text-xl text-gray-400">Sound familiar?</p>
            </motion.div>
          )}

          {/* Realization Phase */}
          {currentPhase === 'realization' && (
            <motion.div
              key="realization"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="text-center max-w-4xl mx-auto"
            >
              <Brain className="w-20 h-20 mx-auto mb-6 text-purple-400" />
              <h2 className="text-3xl md:text-5xl font-bold text-white mb-4">
                {STORY_TEXTS.realization}
              </h2>
              <p className="text-xl text-gray-400 mb-6">
                AI doesn't know your architecture. Your standards. Your business logic.
              </p>
              <p className="text-lg text-gray-500">
                It takes a developer to orchestrate AI properly.
              </p>
            </motion.div>
          )}

          {/* Solution Phase - We are the solution */}
          {currentPhase === 'solution' && (
            <motion.div
              key="solution"
              initial={{ opacity: 0, scale: 1.2 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="text-center"
            >
              <Users className="w-24 h-24 mx-auto mb-6 text-green-400" />
              <h2 className="text-4xl md:text-6xl font-bold text-white mb-4">
                {STORY_TEXTS.solution}
              </h2>
              <p className="text-xl text-gray-400">
                Expert developers who know how to harness AI's full potential.
              </p>
            </motion.div>
          )}

          {/* Expertise & Results Phases - Show our work */}
          {(currentPhase === 'expertise' || currentPhase === 'results') && (
            <motion.div
              key="building"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="relative"
              ref={containerRef}
            >
              {/* Header Text - Fixed position, doesn't move with scroll */}
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{
                  height: currentPhase === 'results' ? 'auto' : 0,
                  opacity: currentPhase === 'results' ? 1 : 0
                }}
                transition={{
                  height: { duration: 0.8, ease: "easeInOut" },
                  opacity: { duration: 0.6, delay: 0.2 }
                }}
                style={{
                  opacity: currentPhase === 'results' ? contentOpacity : 1
                }}
                className="overflow-hidden relative z-10"
              >
                <div className="text-center mb-8 pt-8">
                  <div className="inline-flex items-center gap-2 mb-4 px-4 py-2 bg-gradient-to-r from-green-500/20 to-blue-500/20 rounded-full border border-green-500/30">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                    <span className="text-sm text-green-400 font-medium">Expert Developers + AI Tools</span>
                  </div>
                  <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6">
                    <span className="block mb-2">{STORY_TEXTS.expertise}</span>
                    <span className="block bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
                      {STORY_TEXTS.results}
                    </span>
                  </h1>
                  <p className="text-lg md:text-xl text-gray-400 max-w-3xl mx-auto">
                    We're developers who've mastered every AI tool.<br/> ChatGPT, Claude, Copilot, Bolt, Bubble, Lovable -
                    we know their strengths, their limits, and how to make them deliver production-ready code.
                  </p>

                  {/* CTA Buttons */}
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 1 }}
                    className="flex flex-col sm:flex-row gap-4 justify-center mt-8"
                  >
                    <button className="px-8 py-4 bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-lg font-semibold hover:shadow-xl hover:shadow-green-500/25 transition-all transform hover:scale-105">
                      Let's Build Your App
                    </button>
                    <button className="px-8 py-4 bg-gray-800 text-white rounded-lg font-semibold hover:bg-gray-700 transition-all">
                      See Our Process
                    </button>
                  </motion.div>
                </div>
              </motion.div>

              {/* Code Generation Screen - Moves up on scroll to cover the content above */}
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.3, duration: 0.6 }}
                style={{
                  y: currentPhase === 'results' ? codeScreenY : 0,
                  position: currentPhase === 'results' ? 'sticky' : 'relative',
                  top: currentPhase === 'results' ? '0' : 'auto',
                }}
                className="h-[800px] -mx-4 md:mx-0 z-20 bg-gradient-to-br from-gray-950 via-gray-900 to-black"
              >
                <AnimatedCodeScreen />
              </motion.div>

              {/* Stats */}
              {currentPhase === 'results' && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 1.5 }}
                  className="grid grid-cols-3 gap-8 max-w-3xl mx-auto mt-12"
                >
                  {[
                    { label: 'AI Tools Mastered', value: '20+', color: 'text-purple-400' },
                    { label: 'Faster Than DIY', value: '10x', color: 'text-blue-400' },
                    { label: 'Production-Ready Code', value: '100%', color: 'text-green-400' },
                  ].map((stat, index) => (
                    <motion.div
                      key={stat.label}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 1.7 + index * 0.1 }}
                      className="text-center"
                    >
                      <div className={`text-3xl md:text-4xl font-bold ${stat.color}`}>
                        {stat.value}
                      </div>
                      <div className="text-sm text-gray-500 mt-1">{stat.label}</div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Scroll Indicator */}
        <AnimatePresence>
          {showScrollIndicator && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 2 }}
              className="absolute bottom-8 left-1/2 -translate-x-1/2"
            >
              <motion.div
                animate={{ y: [0, 10, 0] }}
                transition={{ duration: 1.5, repeat: Infinity }}
                className="flex flex-col items-center gap-2"
              >
                <span className="text-sm text-gray-400">See how we do it</span>
                <ChevronDown className="w-6 h-6 text-purple-400" />
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </section>
  );
}